/***********************************************************************
결합 인덱스를 구성하는 컬럼의 순서
  * 1순위 : 점/선분 - 컬럼이 사용한 연산자에 의한 인덱스 컬럼 선정
  * 2순위 :         - 랜덤 액세스를 고려한 인덱스 컬럼 선정
  * 3순위 :         - 정렬 제거를 위한 인덱스 컬럼 선정
  * 4순위 : 분포도  - 단일 컬럼의 분포도를 고려한 인덱스 컬럼 선정

[요약] 결합인덱스 생성 시, 분포도보다 연산자에 의한 인덱스 컬럼 선정이 우선이다.
***********************************************************************/

-- (1) 단일 컬럼의 분포도를 고려한 인덱스 선정
SELECT 카드번호, 사용액
FROM 거래내역
WHERE 카드번호 = '111'                                 -- 분포도 좋음   = '111'을 만족하는 데이터 매우 적음
      AND 거래일자 BETWEEN '20201101' AND '20201130';  -- 분포도 안좋음 = 다음 거래일자에 해당하는 데이터 매우 많음
---- 컬럼의 분포도를 고려하여 인덱스를 생성한다면, [카드번호+거래일자] 로 생성할 수 있다.
---- 위와 같이 인덱스를 구성할 시, 카드번호 컬럼에 의해 처리범위는 감소하게 되며, 이후 거래일자 컬럼에 의해서도 처리범위가 감소하므로
---- 원하는 데이터에 대해 최소의 액세스로 결과를 추출할 수 있게 된다.


-- (2)
SELECT 카드번호, 사용액
FROM 거래내역
WHERE 카드번호 BETWEEN '111' AND '555' -- 분포도 좋음    + 선분
      AND 거래일자 = '20201112'        -- 분포도 안좋음  + 점
;
-- 컬럼의 분포도만을 생각하여 [카드번호+거래일자]로 생성한다면, 카드번호 컬럼에 의해서만 처리 범위가 감소하게 되어 성능저하를 경험할 수 밖에 없다.
-- 이는 컬럼의 분포도가 좋은 커럼을 인덱스의 앞에 위치시켰지만, 처리 범위는 카드번호 컬럼에 의해서만 감소하는 형태이기 때문이다.
-- 당연한 말처럼 들릴지 모르겠지만, 의외로 이와 같은 함정에 자주 빠지게 된다.
----- 이를 테면, 카드번호 값을 유일한 값으로 관리하는 카드테이블에는 카드번호 컬럼의 분포도(그 값은 유일하므로)가 좋다고 얘기한다.
----- 하지만 이는 점(=)조건으로 조회할 경우이다. 만약 카드 번호를 선분(LIKE '1%')조건으로 조회한다면 이는 절대 분포도가 좋을 수 없다.
----- 따라서, 결합 컬럼 인덱스 선정에서는 분포도보다 연산자(점/선분)를 고려하는 것이 더 중요하다.
