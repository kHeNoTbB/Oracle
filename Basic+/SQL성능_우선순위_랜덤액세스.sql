/*****************************************************************************************************************
[결합 인덱스를 구성하는 컬럼의 순서]
  * 1순위 : 점/선분 - 컬럼이 사용한 연산자에 의한 인덱스 컬럼 선정
  * 2순위 :         - 랜덤 액세스를 고려한 인덱스 컬럼 선정
  * 3순위 :         - 정렬 제거를 위한 인덱스 컬럼 선정
  * 4순위 : 분포도  - 단일 컬럼의 분포도를 고려한 인덱스 컬럼 선정

[랜덤액세스]
  * 데이터를 저장하는 블록을 한번에 여러개 액세스 하는 것이 아닌, 한번의 하나의 블록만을 액세스 하는 방식
  * 이는, 인덱스를 액세스 하여 확인한 ROWID를 이용하여 테이블을 액세스하는 경우 랜덤 액세스가 발생하게 된다.
    - ROWID : 해당 데이터를 찾아가는 유일한 주소 값
  * 즉, 인덱스 액세스 후 테이블을 액세스 하는 경우에 발생하는 I/O는 한 번에 하나의 블록만 액세스하는 랜덤 액세스가 발생함
  * 랜덤액세스의 종류
    (1) 확인 랜덤 액세스
        - WHERE 조건의 컬럼이 인덱스에 존재하지 않아, 테이블을 액세스 하는 랜덤 액세스
        - 랜덤 액세스가 발생한 후, 버려지는 데이터가 존재함
        - 즉, 애써 테이블을 액세스한 후, 버려지는 것은 낭비이기 때문에 이를 제거하면 성능에 있어 효과적일 수 있음
    (2) 추출 랜덤 액세스
    (3) 정렬 랜덤 액세스
  
[요약] 
*****************************************************************************************************************/

-- (1) 확인 랜덤 액세스
SELECT 카드번호, 사용액
FROM 거래내역
WHERE 카드번호 = '111'
      AND 거래일자 BETWEEN '20201101' AND '20201130';
---- 인덱스 : [카드번호]
---- 인덱스가 카드번호로만 구성되어 있기 때문에, 카드번호 컬럼에 의해 처리범위가 감소하는 형태이다.
---- 즉, 카드번호 조건을 만족하는 모든 데이터에 대해 테이블을 액세스 하면서, 거래일자 컬럼의 값을 확인해야 할 것이다.
---- 이는 WHERE 조건의 컬럼이 인덱스에 존재하지 않아서, 인덱스 조건에 있는 테이블을 모두 액세스 하는 랜덤 액세스로 볼 수 있다.
